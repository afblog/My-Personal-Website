{"ast":null,"code":"import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"@tsparticles/engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils.js\";\nconst minOpacity = 0,\n  minWidth = 0,\n  minDistance = 0,\n  half = 0.5,\n  maxFrequency = 1;\nexport class LinkInstance {\n  constructor(container, engine) {\n    this._drawLinkLine = (p1, link) => {\n      const p1LinksOptions = p1.options.links;\n      if (!(p1LinksOptions !== null && p1LinksOptions !== void 0 && p1LinksOptions.enable)) {\n        return;\n      }\n      const container = this._container,\n        options = container.actualOptions,\n        p2 = link.destination,\n        pos1 = p1.getPosition(),\n        pos2 = p2.getPosition();\n      let opacity = link.opacity;\n      container.canvas.draw(ctx => {\n        var _p1$options$twinkle, _p1$retina$linksWidth, _p1$retina$linksDista;\n        let colorLine;\n        const twinkle = (_p1$options$twinkle = p1.options.twinkle) === null || _p1$options$twinkle === void 0 ? void 0 : _p1$options$twinkle.lines;\n        if (twinkle !== null && twinkle !== void 0 && twinkle.enable) {\n          const twinkleFreq = twinkle.frequency,\n            twinkleRgb = rangeColorToRgb(this._engine, twinkle.color),\n            twinkling = getRandom() < twinkleFreq;\n          if (twinkling && twinkleRgb) {\n            colorLine = twinkleRgb;\n            opacity = getRangeValue(twinkle.opacity);\n          }\n        }\n        if (!colorLine) {\n          const linkColor = p1LinksOptions.id !== undefined ? container.particles.linksColors.get(p1LinksOptions.id) : container.particles.linksColor;\n          colorLine = getLinkColor(p1, p2, linkColor);\n        }\n        if (!colorLine) {\n          return;\n        }\n        const width = (_p1$retina$linksWidth = p1.retina.linksWidth) !== null && _p1$retina$linksWidth !== void 0 ? _p1$retina$linksWidth : minWidth,\n          maxDistance = (_p1$retina$linksDista = p1.retina.linksDistance) !== null && _p1$retina$linksDista !== void 0 ? _p1$retina$linksDista : minDistance,\n          {\n            backgroundMask\n          } = options;\n        drawLinkLine({\n          context: ctx,\n          width,\n          begin: pos1,\n          end: pos2,\n          engine: this._engine,\n          maxDistance,\n          canvasSize: container.canvas.size,\n          links: p1LinksOptions,\n          backgroundMask: backgroundMask,\n          colorLine,\n          opacity\n        });\n      });\n    };\n    this._drawLinkTriangle = (p1, link1, link2) => {\n      var _triangleOptions$opac;\n      const linksOptions = p1.options.links;\n      if (!(linksOptions !== null && linksOptions !== void 0 && linksOptions.enable)) {\n        return;\n      }\n      const triangleOptions = linksOptions.triangles;\n      if (!triangleOptions.enable) {\n        return;\n      }\n      const container = this._container,\n        options = container.actualOptions,\n        p2 = link1.destination,\n        p3 = link2.destination,\n        opacityTriangle = (_triangleOptions$opac = triangleOptions.opacity) !== null && _triangleOptions$opac !== void 0 ? _triangleOptions$opac : (link1.opacity + link2.opacity) * half;\n      if (opacityTriangle <= minOpacity) {\n        return;\n      }\n      container.canvas.draw(ctx => {\n        var _p1$retina$linksDista2;\n        const pos1 = p1.getPosition(),\n          pos2 = p2.getPosition(),\n          pos3 = p3.getPosition(),\n          linksDistance = (_p1$retina$linksDista2 = p1.retina.linksDistance) !== null && _p1$retina$linksDista2 !== void 0 ? _p1$retina$linksDista2 : minDistance;\n        if (getDistance(pos1, pos2) > linksDistance || getDistance(pos3, pos2) > linksDistance || getDistance(pos3, pos1) > linksDistance) {\n          return;\n        }\n        let colorTriangle = rangeColorToRgb(this._engine, triangleOptions.color);\n        if (!colorTriangle) {\n          const linkColor = linksOptions.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorTriangle = getLinkColor(p1, p2, linkColor);\n        }\n        if (!colorTriangle) {\n          return;\n        }\n        drawLinkTriangle({\n          context: ctx,\n          pos1,\n          pos2,\n          pos3,\n          backgroundMask: options.backgroundMask,\n          colorTriangle,\n          opacityTriangle\n        });\n      });\n    };\n    this._drawTriangles = (options, p1, link, p1Links) => {\n      var _options$links, _p2$options$links, _p2$links;\n      const p2 = link.destination;\n      if (!((_options$links = options.links) !== null && _options$links !== void 0 && _options$links.triangles.enable && (_p2$options$links = p2.options.links) !== null && _p2$options$links !== void 0 && _p2$options$links.triangles.enable)) {\n        return;\n      }\n      const vertices = (_p2$links = p2.links) === null || _p2$links === void 0 ? void 0 : _p2$links.filter(t => {\n        const linkFreq = this._getLinkFrequency(p2, t.destination),\n          minCount = 0;\n        return p2.options.links && linkFreq <= p2.options.links.frequency && p1Links.findIndex(l => l.destination === t.destination) >= minCount;\n      });\n      if (!(vertices !== null && vertices !== void 0 && vertices.length)) {\n        return;\n      }\n      for (const vertex of vertices) {\n        const p3 = vertex.destination,\n          triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n        if (triangleFreq > options.links.triangles.frequency) {\n          continue;\n        }\n        this._drawLinkTriangle(p1, link, vertex);\n      }\n    };\n    this._getLinkFrequency = (p1, p2) => {\n      return setLinkFrequency([p1, p2], this._freqs.links);\n    };\n    this._getTriangleFrequency = (p1, p2, p3) => {\n      return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n    };\n    this._container = container;\n    this._engine = engine;\n    this._freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n  }\n  drawParticle(context, particle) {\n    const {\n      links,\n      options\n    } = particle;\n    if (!(links !== null && links !== void 0 && links.length)) {\n      return;\n    }\n    const p1Links = links.filter(l => options.links && (options.links.frequency >= maxFrequency || this._getLinkFrequency(particle, l.destination) <= options.links.frequency));\n    for (const link of p1Links) {\n      var _particle$retina$link;\n      this._drawTriangles(options, particle, link, p1Links);\n      if (link.opacity > minOpacity && ((_particle$retina$link = particle.retina.linksWidth) !== null && _particle$retina$link !== void 0 ? _particle$retina$link : minWidth) > minWidth) {\n        this._drawLinkLine(particle, link);\n      }\n    }\n  }\n  async init() {\n    this._freqs.links = new Map();\n    this._freqs.triangles = new Map();\n    await Promise.resolve();\n  }\n  particleCreated(particle) {\n    particle.links = [];\n    if (!particle.options.links) {\n      return;\n    }\n    const ratio = this._container.retina.pixelRatio,\n      {\n        retina\n      } = particle,\n      {\n        distance,\n        width\n      } = particle.options.links;\n    retina.linksDistance = distance * ratio;\n    retina.linksWidth = width * ratio;\n  }\n  particleDestroyed(particle) {\n    particle.links = [];\n  }\n}","map":{"version":3,"names":["getDistance","getLinkColor","getRandom","getRangeValue","rangeColorToRgb","drawLinkLine","drawLinkTriangle","setLinkFrequency","minOpacity","minWidth","minDistance","half","maxFrequency","LinkInstance","constructor","container","engine","_drawLinkLine","p1","link","p1LinksOptions","options","links","enable","_container","actualOptions","p2","destination","pos1","getPosition","pos2","opacity","canvas","draw","ctx","_p1$options$twinkle","_p1$retina$linksWidth","_p1$retina$linksDista","colorLine","twinkle","lines","twinkleFreq","frequency","twinkleRgb","_engine","color","twinkling","linkColor","id","undefined","particles","linksColors","get","linksColor","width","retina","linksWidth","maxDistance","linksDistance","backgroundMask","context","begin","end","canvasSize","size","_drawLinkTriangle","link1","link2","_triangleOptions$opac","linksOptions","triangleOptions","triangles","p3","opacityTriangle","_p1$retina$linksDista2","pos3","colorTriangle","_drawTriangles","p1Links","_options$links","_p2$options$links","_p2$links","vertices","filter","t","linkFreq","_getLinkFrequency","minCount","findIndex","l","length","vertex","triangleFreq","_getTriangleFrequency","_freqs","Map","drawParticle","particle","_particle$retina$link","init","Promise","resolve","particleCreated","ratio","pixelRatio","distance","particleDestroyed"],"sources":["/Users/abolfaz/Programming/ آموزش ها/projects/AFblog/node_modules/@tsparticles/interaction-particles-links/browser/LinkInstance.js"],"sourcesContent":["import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils.js\";\nconst minOpacity = 0, minWidth = 0, minDistance = 0, half = 0.5, maxFrequency = 1;\nexport class LinkInstance {\n    constructor(container, engine) {\n        this._drawLinkLine = (p1, link) => {\n            const p1LinksOptions = p1.options.links;\n            if (!p1LinksOptions?.enable) {\n                return;\n            }\n            const container = this._container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            let opacity = link.opacity;\n            container.canvas.draw(ctx => {\n                let colorLine;\n                const twinkle = p1.options.twinkle?.lines;\n                if (twinkle?.enable) {\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(this._engine, twinkle.color), twinkling = getRandom() < twinkleFreq;\n                    if (twinkling && twinkleRgb) {\n                        colorLine = twinkleRgb;\n                        opacity = getRangeValue(twinkle.opacity);\n                    }\n                }\n                if (!colorLine) {\n                    const linkColor = p1LinksOptions.id !== undefined\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\n                        : container.particles.linksColor;\n                    colorLine = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorLine) {\n                    return;\n                }\n                const width = p1.retina.linksWidth ?? minWidth, maxDistance = p1.retina.linksDistance ?? minDistance, { backgroundMask } = options;\n                drawLinkLine({\n                    context: ctx,\n                    width,\n                    begin: pos1,\n                    end: pos2,\n                    engine: this._engine,\n                    maxDistance,\n                    canvasSize: container.canvas.size,\n                    links: p1LinksOptions,\n                    backgroundMask: backgroundMask,\n                    colorLine,\n                    opacity,\n                });\n            });\n        };\n        this._drawLinkTriangle = (p1, link1, link2) => {\n            const linksOptions = p1.options.links;\n            if (!linksOptions?.enable) {\n                return;\n            }\n            const triangleOptions = linksOptions.triangles;\n            if (!triangleOptions.enable) {\n                return;\n            }\n            const container = this._container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) * half;\n            if (opacityTriangle <= minOpacity) {\n                return;\n            }\n            container.canvas.draw(ctx => {\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? minDistance;\n                if (getDistance(pos1, pos2) > linksDistance ||\n                    getDistance(pos3, pos2) > linksDistance ||\n                    getDistance(pos3, pos1) > linksDistance) {\n                    return;\n                }\n                let colorTriangle = rangeColorToRgb(this._engine, triangleOptions.color);\n                if (!colorTriangle) {\n                    const linkColor = linksOptions.id !== undefined\n                        ? container.particles.linksColors.get(linksOptions.id)\n                        : container.particles.linksColor;\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorTriangle) {\n                    return;\n                }\n                drawLinkTriangle({\n                    context: ctx,\n                    pos1,\n                    pos2,\n                    pos3,\n                    backgroundMask: options.backgroundMask,\n                    colorTriangle,\n                    opacityTriangle,\n                });\n            });\n        };\n        this._drawTriangles = (options, p1, link, p1Links) => {\n            const p2 = link.destination;\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n                return;\n            }\n            const vertices = p2.links?.filter(t => {\n                const linkFreq = this._getLinkFrequency(p2, t.destination), minCount = 0;\n                return (p2.options.links &&\n                    linkFreq <= p2.options.links.frequency &&\n                    p1Links.findIndex(l => l.destination === t.destination) >= minCount);\n            });\n            if (!vertices?.length) {\n                return;\n            }\n            for (const vertex of vertices) {\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                    continue;\n                }\n                this._drawLinkTriangle(p1, link, vertex);\n            }\n        };\n        this._getLinkFrequency = (p1, p2) => {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n        };\n        this._getTriangleFrequency = (p1, p2, p3) => {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n        };\n        this._container = container;\n        this._engine = engine;\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        const { links, options } = particle;\n        if (!links?.length) {\n            return;\n        }\n        const p1Links = links.filter(l => options.links &&\n            (options.links.frequency >= maxFrequency ||\n                this._getLinkFrequency(particle, l.destination) <= options.links.frequency));\n        for (const link of p1Links) {\n            this._drawTriangles(options, particle, link, p1Links);\n            if (link.opacity > minOpacity && (particle.retina.linksWidth ?? minWidth) > minWidth) {\n                this._drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n        await Promise.resolve();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this._container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\n        retina.linksDistance = distance * ratio;\n        retina.linksWidth = width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}