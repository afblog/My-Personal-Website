{"ast":null,"code":"import _objectSpread from \"/Users/abolfaz/Downloads/AFblog/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils.js\";\nimport { deepExtend, getLogger, safeMutationObserver } from \"../Utils/Utils.js\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { generatedAttribute } from \"./Utils/Constants.js\";\nfunction setTransformValue(factor, newFactor, key) {\n  const newValue = newFactor[key],\n    defaultValue = 1;\n  if (newValue !== undefined) {\n    var _factor$key;\n    factor[key] = ((_factor$key = factor[key]) !== null && _factor$key !== void 0 ? _factor$key : defaultValue) * newValue;\n  }\n}\nfunction setStyle(canvas, style) {\n  let important = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!style) {\n    return;\n  }\n  const element = canvas;\n  if (!element) {\n    return;\n  }\n  const elementStyle = element.style;\n  if (!elementStyle) {\n    return;\n  }\n  for (const key in style) {\n    const value = style[key];\n    elementStyle.setProperty(key, value, important ? \"important\" : \"\");\n  }\n}\nexport class Canvas {\n  constructor(container, engine) {\n    this.container = container;\n    this._applyPostDrawUpdaters = particle => {\n      for (const updater of this._postDrawUpdaters) {\n        var _updater$afterDraw;\n        (_updater$afterDraw = updater.afterDraw) === null || _updater$afterDraw === void 0 || _updater$afterDraw.call(updater, particle);\n      }\n    };\n    this._applyPreDrawUpdaters = (ctx, particle, radius, zOpacity, colorStyles, transform) => {\n      for (const updater of this._preDrawUpdaters) {\n        var _updater$beforeDraw;\n        if (updater.getColorStyles) {\n          const {\n            fill,\n            stroke\n          } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n          if (fill) {\n            colorStyles.fill = fill;\n          }\n          if (stroke) {\n            colorStyles.stroke = stroke;\n          }\n        }\n        if (updater.getTransformValues) {\n          const updaterTransform = updater.getTransformValues(particle);\n          for (const key in updaterTransform) {\n            setTransformValue(transform, updaterTransform, key);\n          }\n        }\n        (_updater$beforeDraw = updater.beforeDraw) === null || _updater$beforeDraw === void 0 || _updater$beforeDraw.call(updater, particle);\n      }\n    };\n    this._applyResizePlugins = () => {\n      for (const plugin of this._resizePlugins) {\n        var _plugin$resize;\n        (_plugin$resize = plugin.resize) === null || _plugin$resize === void 0 || _plugin$resize.call(plugin);\n      }\n    };\n    this._getPluginParticleColors = particle => {\n      let fColor, sColor;\n      for (const plugin of this._colorPlugins) {\n        if (!fColor && plugin.particleFillColor) {\n          fColor = rangeColorToHsl(this._engine, plugin.particleFillColor(particle));\n        }\n        if (!sColor && plugin.particleStrokeColor) {\n          sColor = rangeColorToHsl(this._engine, plugin.particleStrokeColor(particle));\n        }\n        if (fColor && sColor) {\n          break;\n        }\n      }\n      return [fColor, sColor];\n    };\n    this._initCover = async () => {\n      const options = this.container.actualOptions,\n        cover = options.backgroundMask.cover,\n        color = cover.color;\n      if (color) {\n        const coverRgb = rangeColorToRgb(this._engine, color);\n        if (coverRgb) {\n          const coverColor = _objectSpread(_objectSpread({}, coverRgb), {}, {\n            a: cover.opacity\n          });\n          this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        }\n      } else {\n        await new Promise((resolve, reject) => {\n          if (!cover.image) {\n            return;\n          }\n          const img = document.createElement(\"img\");\n          img.addEventListener(\"load\", () => {\n            this._coverImage = {\n              image: img,\n              opacity: cover.opacity\n            };\n            resolve();\n          });\n          img.addEventListener(\"error\", evt => {\n            reject(evt.error);\n          });\n          img.src = cover.image;\n        });\n      }\n    };\n    this._initStyle = () => {\n      const element = this.element,\n        options = this.container.actualOptions;\n      if (!element) {\n        return;\n      }\n      if (this._fullScreen) {\n        this._originalStyle = deepExtend({}, element.style);\n        this._setFullScreenStyle();\n      } else {\n        this._resetOriginalStyle();\n      }\n      for (const key in options.style) {\n        if (!key || !options.style) {\n          continue;\n        }\n        const value = options.style[key];\n        if (!value) {\n          continue;\n        }\n        element.style.setProperty(key, value, \"important\");\n      }\n    };\n    this._initTrail = async () => {\n      const options = this.container.actualOptions,\n        trail = options.particles.move.trail,\n        trailFill = trail.fill;\n      if (!trail.enable) {\n        return;\n      }\n      const factorNumerator = 1,\n        opacity = factorNumerator / trail.length;\n      if (trailFill.color) {\n        const fillColor = rangeColorToRgb(this._engine, trailFill.color);\n        if (!fillColor) {\n          return;\n        }\n        this._trailFill = {\n          color: _objectSpread({}, fillColor),\n          opacity\n        };\n      } else {\n        await new Promise((resolve, reject) => {\n          if (!trailFill.image) {\n            return;\n          }\n          const img = document.createElement(\"img\");\n          img.addEventListener(\"load\", () => {\n            this._trailFill = {\n              image: img,\n              opacity\n            };\n            resolve();\n          });\n          img.addEventListener(\"error\", evt => {\n            reject(evt.error);\n          });\n          img.src = trailFill.image;\n        });\n      }\n    };\n    this._paintBase = baseColor => {\n      this.draw(ctx => paintBase(ctx, this.size, baseColor));\n    };\n    this._paintImage = (image, opacity) => {\n      this.draw(ctx => paintImage(ctx, this.size, image, opacity));\n    };\n    this._repairStyle = () => {\n      const element = this.element;\n      if (!element) {\n        return;\n      }\n      this._safeMutationObserver(observer => observer.disconnect());\n      this._initStyle();\n      this.initBackground();\n      this._safeMutationObserver(observer => {\n        if (!element || !(element instanceof Node)) {\n          return;\n        }\n        observer.observe(element, {\n          attributes: true\n        });\n      });\n    };\n    this._resetOriginalStyle = () => {\n      const element = this.element,\n        originalStyle = this._originalStyle;\n      if (!(element && originalStyle)) {\n        return;\n      }\n      setStyle(element, originalStyle);\n    };\n    this._safeMutationObserver = callback => {\n      if (!this._mutationObserver) {\n        return;\n      }\n      callback(this._mutationObserver);\n    };\n    this._setFullScreenStyle = () => {\n      const element = this.element;\n      if (!element) {\n        return;\n      }\n      const radix = 10,\n        zIndex = this.container.actualOptions.fullScreen.zIndex.toString(radix);\n      setStyle(element, {\n        position: \"fixed\",\n        \"z-index\": zIndex,\n        zIndex: zIndex,\n        top: \"0\",\n        left: \"0\",\n        width: \"100%\",\n        height: \"100%\"\n      }, true);\n    };\n    this._engine = engine;\n    this._standardSize = {\n      height: 0,\n      width: 0\n    };\n    const pxRatio = container.retina.pixelRatio,\n      stdSize = this._standardSize;\n    this.size = {\n      height: stdSize.height * pxRatio,\n      width: stdSize.width * pxRatio\n    };\n    this._context = null;\n    this._generated = false;\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n  get _fullScreen() {\n    return this.container.actualOptions.fullScreen.enable;\n  }\n  clear() {\n    const options = this.container.actualOptions,\n      trail = options.particles.move.trail,\n      trailFill = this._trailFill,\n      minimumLength = 0;\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > minimumLength && trailFill) {\n      if (trailFill.color) {\n        this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n      } else if (trailFill.image) {\n        this._paintImage(trailFill.image, trailFill.opacity);\n      }\n    } else if (options.clear) {\n      this.draw(ctx => {\n        clear(ctx, this.size);\n      });\n    }\n  }\n  destroy() {\n    this.stop();\n    if (this._generated) {\n      const element = this.element;\n      element === null || element === void 0 || element.remove();\n    } else {\n      this._resetOriginalStyle();\n    }\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n  draw(cb) {\n    const ctx = this._context;\n    if (!ctx) {\n      return;\n    }\n    return cb(ctx);\n  }\n  drawAsync(cb) {\n    const ctx = this._context;\n    if (!ctx) {\n      return undefined;\n    }\n    return cb(ctx);\n  }\n  drawParticle(particle, delta) {\n    var _particle$getStrokeCo;\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n    const radius = particle.getRadius(),\n      minimumSize = 0;\n    if (radius <= minimumSize) {\n      return;\n    }\n    const pfColor = particle.getFillColor(),\n      psColor = (_particle$getStrokeCo = particle.getStrokeColor()) !== null && _particle$getStrokeCo !== void 0 ? _particle$getStrokeCo : pfColor;\n    let [fColor, sColor] = this._getPluginParticleColors(particle);\n    if (!fColor) {\n      fColor = pfColor;\n    }\n    if (!sColor) {\n      sColor = psColor;\n    }\n    if (!fColor && !sColor) {\n      return;\n    }\n    this.draw(ctx => {\n      var _ref, _particle$bubble$opac, _particle$opacity, _particle$strokeOpaci;\n      const container = this.container,\n        options = container.actualOptions,\n        zIndexOptions = particle.options.zIndex,\n        zIndexFactorOffset = 1,\n        zIndexFactor = zIndexFactorOffset - particle.zIndexFactor,\n        zOpacityFactor = zIndexFactor ** zIndexOptions.opacityRate,\n        defaultOpacity = 1,\n        opacity = (_ref = (_particle$bubble$opac = particle.bubble.opacity) !== null && _particle$bubble$opac !== void 0 ? _particle$bubble$opac : (_particle$opacity = particle.opacity) === null || _particle$opacity === void 0 ? void 0 : _particle$opacity.value) !== null && _ref !== void 0 ? _ref : defaultOpacity,\n        strokeOpacity = (_particle$strokeOpaci = particle.strokeOpacity) !== null && _particle$strokeOpaci !== void 0 ? _particle$strokeOpaci : opacity,\n        zOpacity = opacity * zOpacityFactor,\n        zStrokeOpacity = strokeOpacity * zOpacityFactor,\n        transform = {},\n        colorStyles = {\n          fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n        };\n      colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n      this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n      drawParticle({\n        container,\n        context: ctx,\n        particle,\n        delta,\n        colorStyles,\n        backgroundMask: options.backgroundMask.enable,\n        composite: options.backgroundMask.composite,\n        radius: radius * zIndexFactor ** zIndexOptions.sizeRate,\n        opacity: zOpacity,\n        shadow: particle.options.shadow,\n        transform\n      });\n      this._applyPostDrawUpdaters(particle);\n    });\n  }\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => drawParticlePlugin(ctx, plugin, particle, delta));\n  }\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => drawPlugin(ctx, plugin, delta));\n  }\n  async init() {\n    this._safeMutationObserver(obs => obs.disconnect());\n    this._mutationObserver = safeMutationObserver(records => {\n      for (const record of records) {\n        if (record.type === \"attributes\" && record.attributeName === \"style\") {\n          this._repairStyle();\n        }\n      }\n    });\n    this.resize();\n    this._initStyle();\n    await this._initCover();\n    try {\n      await this._initTrail();\n    } catch (e) {\n      getLogger().error(e);\n    }\n    this.initBackground();\n    this._safeMutationObserver(obs => {\n      if (!this.element || !(this.element instanceof Node)) {\n        return;\n      }\n      obs.observe(this.element, {\n        attributes: true\n      });\n    });\n    this.initUpdaters();\n    this.initPlugins();\n    this.paint();\n  }\n  initBackground() {\n    const options = this.container.actualOptions,\n      background = options.background,\n      element = this.element;\n    if (!element) {\n      return;\n    }\n    const elementStyle = element.style;\n    if (!elementStyle) {\n      return;\n    }\n    if (background.color) {\n      const color = rangeColorToRgb(this._engine, background.color);\n      elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n  initPlugins() {\n    this._resizePlugins = [];\n    for (const plugin of this.container.plugins.values()) {\n      var _plugin$particleFillC;\n      if (plugin.resize) {\n        this._resizePlugins.push(plugin);\n      }\n      if ((_plugin$particleFillC = plugin.particleFillColor) !== null && _plugin$particleFillC !== void 0 ? _plugin$particleFillC : plugin.particleStrokeColor) {\n        this._colorPlugins.push(plugin);\n      }\n    }\n  }\n  initUpdaters() {\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    for (const updater of this.container.particles.updaters) {\n      var _ref2, _updater$getColorStyl;\n      if (updater.afterDraw) {\n        this._postDrawUpdaters.push(updater);\n      }\n      if ((_ref2 = (_updater$getColorStyl = updater.getColorStyles) !== null && _updater$getColorStyl !== void 0 ? _updater$getColorStyl : updater.getTransformValues) !== null && _ref2 !== void 0 ? _ref2 : updater.beforeDraw) {\n        this._preDrawUpdaters.push(updater);\n      }\n    }\n  }\n  loadCanvas(canvas) {\n    if (this._generated && this.element) {\n      this.element.remove();\n    }\n    this._generated = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this._generated;\n    this.element = canvas;\n    this.element.ariaHidden = \"true\";\n    this._originalStyle = deepExtend({}, this.element.style);\n    const standardSize = this._standardSize;\n    standardSize.height = canvas.offsetHeight;\n    standardSize.width = canvas.offsetWidth;\n    const pxRatio = this.container.retina.pixelRatio,\n      retinaSize = this.size;\n    canvas.height = retinaSize.height = standardSize.height * pxRatio;\n    canvas.width = retinaSize.width = standardSize.width * pxRatio;\n    this._context = this.element.getContext(\"2d\");\n    this._safeMutationObserver(obs => {\n      if (!this.element || !(this.element instanceof Node)) {\n        return;\n      }\n      obs.observe(this.element, {\n        attributes: true\n      });\n    });\n    this.container.retina.init();\n    this.initBackground();\n  }\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover) {\n        clear(ctx, this.size);\n        if (this._coverImage) {\n          this._paintImage(this._coverImage.image, this._coverImage.opacity);\n        } else if (this._coverColorStyle) {\n          this._paintBase(this._coverColorStyle);\n        } else {\n          this._paintBase();\n        }\n      } else {\n        this._paintBase();\n      }\n    });\n  }\n  resize() {\n    if (!this.element) {\n      return false;\n    }\n    const container = this.container,\n      currentSize = container.canvas._standardSize,\n      newSize = {\n        width: this.element.offsetWidth,\n        height: this.element.offsetHeight\n      },\n      pxRatio = container.retina.pixelRatio,\n      retinaSize = {\n        width: newSize.width * pxRatio,\n        height: newSize.height * pxRatio\n      };\n    if (newSize.height === currentSize.height && newSize.width === currentSize.width && retinaSize.height === this.element.height && retinaSize.width === this.element.width) {\n      return false;\n    }\n    const oldSize = _objectSpread({}, currentSize);\n    currentSize.height = newSize.height;\n    currentSize.width = newSize.width;\n    const canvasSize = this.size;\n    this.element.width = canvasSize.width = retinaSize.width;\n    this.element.height = canvasSize.height = retinaSize.height;\n    if (this.container.started) {\n      container.particles.setResizeFactor({\n        width: currentSize.width / oldSize.width,\n        height: currentSize.height / oldSize.height\n      });\n    }\n    return true;\n  }\n  stop() {\n    this._safeMutationObserver(obs => obs.disconnect());\n    this._mutationObserver = undefined;\n    this.draw(ctx => clear(ctx, this.size));\n  }\n  async windowResize() {\n    if (!this.element || !this.resize()) {\n      return;\n    }\n    const container = this.container,\n      needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n    this._applyResizePlugins();\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n}","map":{"version":3,"names":["clear","drawParticle","drawParticlePlugin","drawPlugin","paintBase","paintImage","deepExtend","getLogger","safeMutationObserver","getStyleFromHsl","getStyleFromRgb","rangeColorToHsl","rangeColorToRgb","generatedAttribute","setTransformValue","factor","newFactor","key","newValue","defaultValue","undefined","_factor$key","setStyle","canvas","style","important","arguments","length","element","elementStyle","value","setProperty","Canvas","constructor","container","engine","_applyPostDrawUpdaters","particle","updater","_postDrawUpdaters","_updater$afterDraw","afterDraw","call","_applyPreDrawUpdaters","ctx","radius","zOpacity","colorStyles","transform","_preDrawUpdaters","_updater$beforeDraw","getColorStyles","fill","stroke","getTransformValues","updaterTransform","beforeDraw","_applyResizePlugins","plugin","_resizePlugins","_plugin$resize","resize","_getPluginParticleColors","fColor","sColor","_colorPlugins","particleFillColor","_engine","particleStrokeColor","_initCover","options","actualOptions","cover","backgroundMask","color","coverRgb","coverColor","_objectSpread","a","opacity","_coverColorStyle","Promise","resolve","reject","image","img","document","createElement","addEventListener","_coverImage","evt","error","src","_initStyle","_fullScreen","_originalStyle","_setFullScreenStyle","_resetOriginalStyle","_initTrail","trail","particles","move","trailFill","enable","factorNumerator","fillColor","_trailFill","_paintBase","baseColor","draw","size","_paintImage","_repairStyle","_safeMutationObserver","observer","disconnect","initBackground","Node","observe","attributes","originalStyle","callback","_mutationObserver","radix","zIndex","fullScreen","toString","position","top","left","width","height","_standardSize","pxRatio","retina","pixelRatio","stdSize","_context","_generated","minimumLength","paint","destroy","stop","remove","cb","drawAsync","delta","_particle$getStrokeCo","spawning","destroyed","getRadius","minimumSize","pfColor","getFillColor","psColor","getStrokeColor","_ref","_particle$bubble$opac","_particle$opacity","_particle$strokeOpaci","zIndexOptions","zIndexFactorOffset","zIndexFactor","zOpacityFactor","opacityRate","defaultOpacity","bubble","strokeOpacity","zStrokeOpacity","context","composite","sizeRate","shadow","init","obs","records","record","type","attributeName","e","initUpdaters","initPlugins","background","backgroundColor","backgroundImage","backgroundPosition","backgroundRepeat","repeat","backgroundSize","plugins","values","_plugin$particleFillC","push","updaters","_ref2","_updater$getColorStyl","loadCanvas","dataset","ariaHidden","standardSize","offsetHeight","offsetWidth","retinaSize","getContext","currentSize","newSize","oldSize","canvasSize","started","setResizeFactor","windowResize","needsRefresh","updateActualOptions","setDensity","refresh"],"sources":["/Users/abolfaz/Downloads/AFblog/node_modules/@tsparticles/engine/browser/Core/Canvas.js"],"sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils.js\";\nimport { deepExtend, getLogger, safeMutationObserver } from \"../Utils/Utils.js\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nimport { generatedAttribute } from \"./Utils/Constants.js\";\nfunction setTransformValue(factor, newFactor, key) {\n    const newValue = newFactor[key], defaultValue = 1;\n    if (newValue !== undefined) {\n        factor[key] = (factor[key] ?? defaultValue) * newValue;\n    }\n}\nfunction setStyle(canvas, style, important = false) {\n    if (!style) {\n        return;\n    }\n    const element = canvas;\n    if (!element) {\n        return;\n    }\n    const elementStyle = element.style;\n    if (!elementStyle) {\n        return;\n    }\n    for (const key in style) {\n        const value = style[key];\n        elementStyle.setProperty(key, value, important ? \"important\" : \"\");\n    }\n}\nexport class Canvas {\n    constructor(container, engine) {\n        this.container = container;\n        this._applyPostDrawUpdaters = particle => {\n            for (const updater of this._postDrawUpdaters) {\n                updater.afterDraw?.(particle);\n            }\n        };\n        this._applyPreDrawUpdaters = (ctx, particle, radius, zOpacity, colorStyles, transform) => {\n            for (const updater of this._preDrawUpdaters) {\n                if (updater.getColorStyles) {\n                    const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                    if (fill) {\n                        colorStyles.fill = fill;\n                    }\n                    if (stroke) {\n                        colorStyles.stroke = stroke;\n                    }\n                }\n                if (updater.getTransformValues) {\n                    const updaterTransform = updater.getTransformValues(particle);\n                    for (const key in updaterTransform) {\n                        setTransformValue(transform, updaterTransform, key);\n                    }\n                }\n                updater.beforeDraw?.(particle);\n            }\n        };\n        this._applyResizePlugins = () => {\n            for (const plugin of this._resizePlugins) {\n                plugin.resize?.();\n            }\n        };\n        this._getPluginParticleColors = particle => {\n            let fColor, sColor;\n            for (const plugin of this._colorPlugins) {\n                if (!fColor && plugin.particleFillColor) {\n                    fColor = rangeColorToHsl(this._engine, plugin.particleFillColor(particle));\n                }\n                if (!sColor && plugin.particleStrokeColor) {\n                    sColor = rangeColorToHsl(this._engine, plugin.particleStrokeColor(particle));\n                }\n                if (fColor && sColor) {\n                    break;\n                }\n            }\n            return [fColor, sColor];\n        };\n        this._initCover = async () => {\n            const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color;\n            if (color) {\n                const coverRgb = rangeColorToRgb(this._engine, color);\n                if (coverRgb) {\n                    const coverColor = {\n                        ...coverRgb,\n                        a: cover.opacity,\n                    };\n                    this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n                }\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    if (!cover.image) {\n                        return;\n                    }\n                    const img = document.createElement(\"img\");\n                    img.addEventListener(\"load\", () => {\n                        this._coverImage = {\n                            image: img,\n                            opacity: cover.opacity,\n                        };\n                        resolve();\n                    });\n                    img.addEventListener(\"error\", evt => {\n                        reject(evt.error);\n                    });\n                    img.src = cover.image;\n                });\n            }\n        };\n        this._initStyle = () => {\n            const element = this.element, options = this.container.actualOptions;\n            if (!element) {\n                return;\n            }\n            if (this._fullScreen) {\n                this._originalStyle = deepExtend({}, element.style);\n                this._setFullScreenStyle();\n            }\n            else {\n                this._resetOriginalStyle();\n            }\n            for (const key in options.style) {\n                if (!key || !options.style) {\n                    continue;\n                }\n                const value = options.style[key];\n                if (!value) {\n                    continue;\n                }\n                element.style.setProperty(key, value, \"important\");\n            }\n        };\n        this._initTrail = async () => {\n            const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n            if (!trail.enable) {\n                return;\n            }\n            const factorNumerator = 1, opacity = factorNumerator / trail.length;\n            if (trailFill.color) {\n                const fillColor = rangeColorToRgb(this._engine, trailFill.color);\n                if (!fillColor) {\n                    return;\n                }\n                this._trailFill = {\n                    color: {\n                        ...fillColor,\n                    },\n                    opacity,\n                };\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    if (!trailFill.image) {\n                        return;\n                    }\n                    const img = document.createElement(\"img\");\n                    img.addEventListener(\"load\", () => {\n                        this._trailFill = {\n                            image: img,\n                            opacity,\n                        };\n                        resolve();\n                    });\n                    img.addEventListener(\"error\", evt => {\n                        reject(evt.error);\n                    });\n                    img.src = trailFill.image;\n                });\n            }\n        };\n        this._paintBase = baseColor => {\n            this.draw(ctx => paintBase(ctx, this.size, baseColor));\n        };\n        this._paintImage = (image, opacity) => {\n            this.draw(ctx => paintImage(ctx, this.size, image, opacity));\n        };\n        this._repairStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            this._safeMutationObserver(observer => observer.disconnect());\n            this._initStyle();\n            this.initBackground();\n            this._safeMutationObserver(observer => {\n                if (!element || !(element instanceof Node)) {\n                    return;\n                }\n                observer.observe(element, { attributes: true });\n            });\n        };\n        this._resetOriginalStyle = () => {\n            const element = this.element, originalStyle = this._originalStyle;\n            if (!(element && originalStyle)) {\n                return;\n            }\n            setStyle(element, originalStyle);\n        };\n        this._safeMutationObserver = callback => {\n            if (!this._mutationObserver) {\n                return;\n            }\n            callback(this._mutationObserver);\n        };\n        this._setFullScreenStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            const radix = 10, zIndex = this.container.actualOptions.fullScreen.zIndex.toString(radix);\n            setStyle(element, {\n                position: \"fixed\",\n                \"z-index\": zIndex,\n                zIndex: zIndex,\n                top: \"0\",\n                left: \"0\",\n                width: \"100%\",\n                height: \"100%\",\n            }, true);\n        };\n        this._engine = engine;\n        this._standardSize = {\n            height: 0,\n            width: 0,\n        };\n        const pxRatio = container.retina.pixelRatio, stdSize = this._standardSize;\n        this.size = {\n            height: stdSize.height * pxRatio,\n            width: stdSize.width * pxRatio,\n        };\n        this._context = null;\n        this._generated = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    get _fullScreen() {\n        return this.container.actualOptions.fullScreen.enable;\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = this._trailFill, minimumLength = 0;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > minimumLength && trailFill) {\n            if (trailFill.color) {\n                this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n            }\n            else if (trailFill.image) {\n                this._paintImage(trailFill.image, trailFill.opacity);\n            }\n        }\n        else if (options.clear) {\n            this.draw(ctx => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        this.stop();\n        if (this._generated) {\n            const element = this.element;\n            element?.remove();\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return;\n        }\n        return cb(ctx);\n    }\n    drawAsync(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return undefined;\n        }\n        return cb(ctx);\n    }\n    drawParticle(particle, delta) {\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius(), minimumSize = 0;\n        if (radius <= minimumSize) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = particle.getStrokeColor() ?? pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            const container = this.container, options = container.actualOptions, zIndexOptions = particle.options.zIndex, zIndexFactorOffset = 1, zIndexFactor = zIndexFactorOffset - particle.zIndexFactor, zOpacityFactor = zIndexFactor ** zIndexOptions.opacityRate, defaultOpacity = 1, opacity = particle.bubble.opacity ?? particle.opacity?.value ?? defaultOpacity, strokeOpacity = particle.strokeOpacity ?? opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * zIndexFactor ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw(ctx => drawParticlePlugin(ctx, plugin, particle, delta));\n    }\n    drawPlugin(plugin, delta) {\n        this.draw(ctx => drawPlugin(ctx, plugin, delta));\n    }\n    async init() {\n        this._safeMutationObserver(obs => obs.disconnect());\n        this._mutationObserver = safeMutationObserver(records => {\n            for (const record of records) {\n                if (record.type === \"attributes\" && record.attributeName === \"style\") {\n                    this._repairStyle();\n                }\n            }\n        });\n        this.resize();\n        this._initStyle();\n        await this._initCover();\n        try {\n            await this._initTrail();\n        }\n        catch (e) {\n            getLogger().error(e);\n        }\n        this.initBackground();\n        this._safeMutationObserver(obs => {\n            if (!this.element || !(this.element instanceof Node)) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(this._engine, background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const plugin of this.container.plugins.values()) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor ?? plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles ?? updater.getTransformValues ?? updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        if (this._generated && this.element) {\n            this.element.remove();\n        }\n        this._generated =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generated;\n        this.element = canvas;\n        this.element.ariaHidden = \"true\";\n        this._originalStyle = deepExtend({}, this.element.style);\n        const standardSize = this._standardSize;\n        standardSize.height = canvas.offsetHeight;\n        standardSize.width = canvas.offsetWidth;\n        const pxRatio = this.container.retina.pixelRatio, retinaSize = this.size;\n        canvas.height = retinaSize.height = standardSize.height * pxRatio;\n        canvas.width = retinaSize.width = standardSize.width * pxRatio;\n        this._context = this.element.getContext(\"2d\");\n        this._safeMutationObserver(obs => {\n            if (!this.element || !(this.element instanceof Node)) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n        this.container.retina.init();\n        this.initBackground();\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw(ctx => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                if (this._coverImage) {\n                    this._paintImage(this._coverImage.image, this._coverImage.opacity);\n                }\n                else if (this._coverColorStyle) {\n                    this._paintBase(this._coverColorStyle);\n                }\n                else {\n                    this._paintBase();\n                }\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return false;\n        }\n        const container = this.container, currentSize = container.canvas._standardSize, newSize = {\n            width: this.element.offsetWidth,\n            height: this.element.offsetHeight,\n        }, pxRatio = container.retina.pixelRatio, retinaSize = {\n            width: newSize.width * pxRatio,\n            height: newSize.height * pxRatio,\n        };\n        if (newSize.height === currentSize.height &&\n            newSize.width === currentSize.width &&\n            retinaSize.height === this.element.height &&\n            retinaSize.width === this.element.width) {\n            return false;\n        }\n        const oldSize = { ...currentSize };\n        currentSize.height = newSize.height;\n        currentSize.width = newSize.width;\n        const canvasSize = this.size;\n        this.element.width = canvasSize.width = retinaSize.width;\n        this.element.height = canvasSize.height = retinaSize.height;\n        if (this.container.started) {\n            container.particles.setResizeFactor({\n                width: currentSize.width / oldSize.width,\n                height: currentSize.height / oldSize.height,\n            });\n        }\n        return true;\n    }\n    stop() {\n        this._safeMutationObserver(obs => obs.disconnect());\n        this._mutationObserver = undefined;\n        this.draw(ctx => clear(ctx, this.size));\n    }\n    async windowResize() {\n        if (!this.element || !this.resize()) {\n            return;\n        }\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}