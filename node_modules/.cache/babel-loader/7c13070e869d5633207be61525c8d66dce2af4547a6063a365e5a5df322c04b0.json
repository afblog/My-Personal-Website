{"ast":null,"code":"import { clamp, getRandom, getRangeMax, getRangeMin, getRangeValue, mix, randomInRange, setRangeValue } from \"./NumberUtils.js\";\nimport { isArray, isString } from \"./TypeUtils.js\";\nimport { millisecondsToSeconds, percentDenominator } from \"../Core/Utils/Constants.js\";\nimport { AnimationStatus } from \"../Enums/AnimationStatus.js\";\nimport { itemFromArray } from \"./Utils.js\";\nconst randomColorValue = \"random\",\n  midColorValue = \"mid\";\nfunction stringToRgba(engine, input) {\n  if (!input) {\n    return;\n  }\n  for (const manager of engine.colorManagers.values()) {\n    if (input.startsWith(manager.stringPrefix)) {\n      return manager.parseString(input);\n    }\n  }\n}\nexport function rangeColorToRgb(engine, input, index) {\n  let useIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  if (!input) {\n    return;\n  }\n  const color = isString(input) ? {\n    value: input\n  } : input;\n  if (isString(color.value)) {\n    return colorToRgb(engine, color.value, index, useIndex);\n  }\n  if (isArray(color.value)) {\n    return rangeColorToRgb(engine, {\n      value: itemFromArray(color.value, index, useIndex)\n    });\n  }\n  for (const manager of engine.colorManagers.values()) {\n    const res = manager.handleRangeColor(color);\n    if (res) {\n      return res;\n    }\n  }\n}\nexport function colorToRgb(engine, input, index) {\n  let useIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  if (!input) {\n    return;\n  }\n  const color = isString(input) ? {\n    value: input\n  } : input;\n  if (isString(color.value)) {\n    return color.value === randomColorValue ? getRandomRgbColor() : stringToRgb(engine, color.value);\n  }\n  if (isArray(color.value)) {\n    return colorToRgb(engine, {\n      value: itemFromArray(color.value, index, useIndex)\n    });\n  }\n  for (const manager of engine.colorManagers.values()) {\n    const res = manager.handleColor(color);\n    if (res) {\n      return res;\n    }\n  }\n}\nexport function colorToHsl(engine, color, index) {\n  let useIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  const rgb = colorToRgb(engine, color, index, useIndex);\n  return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rangeColorToHsl(engine, color, index) {\n  let useIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  const rgb = rangeColorToRgb(engine, color, index, useIndex);\n  return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rgbToHsl(color) {\n  const rgbMax = 255,\n    hMax = 360,\n    sMax = 100,\n    lMax = 100,\n    hMin = 0,\n    sMin = 0,\n    hPhase = 60,\n    half = 0.5,\n    double = 2,\n    r1 = color.r / rgbMax,\n    g1 = color.g / rgbMax,\n    b1 = color.b / rgbMax,\n    max = Math.max(r1, g1, b1),\n    min = Math.min(r1, g1, b1),\n    res = {\n      h: hMin,\n      l: (max + min) * half,\n      s: sMin\n    };\n  if (max !== min) {\n    res.s = res.l < half ? (max - min) / (max + min) : (max - min) / (double - max - min);\n    res.h = r1 === max ? (g1 - b1) / (max - min) : res.h = g1 === max ? double + (b1 - r1) / (max - min) : double * double + (r1 - g1) / (max - min);\n  }\n  res.l *= lMax;\n  res.s *= sMax;\n  res.h *= hPhase;\n  if (res.h < hMin) {\n    res.h += hMax;\n  }\n  if (res.h >= hMax) {\n    res.h -= hMax;\n  }\n  return res;\n}\nexport function stringToAlpha(engine, input) {\n  var _stringToRgba;\n  return (_stringToRgba = stringToRgba(engine, input)) === null || _stringToRgba === void 0 ? void 0 : _stringToRgba.a;\n}\nexport function stringToRgb(engine, input) {\n  return stringToRgba(engine, input);\n}\nexport function hslToRgb(hsl) {\n  const hMax = 360,\n    sMax = 100,\n    lMax = 100,\n    sMin = 0,\n    lMin = 0,\n    h = (hsl.h % hMax + hMax) % hMax,\n    s = Math.max(sMin, Math.min(sMax, hsl.s)),\n    l = Math.max(lMin, Math.min(lMax, hsl.l)),\n    hNormalized = h / hMax,\n    sNormalized = s / sMax,\n    lNormalized = l / lMax,\n    rgbFactor = 255,\n    triple = 3;\n  if (s === sMin) {\n    const grayscaleValue = Math.round(lNormalized * rgbFactor);\n    return {\n      r: grayscaleValue,\n      g: grayscaleValue,\n      b: grayscaleValue\n    };\n  }\n  const half = 0.5,\n    double = 2,\n    channel = (temp1, temp2, temp3) => {\n      const temp3Min = 0,\n        temp3Max = 1,\n        sextuple = 6;\n      if (temp3 < temp3Min) {\n        temp3++;\n      }\n      if (temp3 > temp3Max) {\n        temp3--;\n      }\n      if (temp3 * sextuple < temp3Max) {\n        return temp1 + (temp2 - temp1) * sextuple * temp3;\n      }\n      if (temp3 * double < temp3Max) {\n        return temp2;\n      }\n      if (temp3 * triple < temp3Max * double) {\n        const temp3Offset = double / triple;\n        return temp1 + (temp2 - temp1) * (temp3Offset - temp3) * sextuple;\n      }\n      return temp1;\n    },\n    sNormalizedOffset = 1,\n    temp1 = lNormalized < half ? lNormalized * (sNormalizedOffset + sNormalized) : lNormalized + sNormalized - lNormalized * sNormalized,\n    temp2 = double * lNormalized - temp1,\n    phaseNumerator = 1,\n    phaseThird = phaseNumerator / triple,\n    red = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized + phaseThird)),\n    green = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized)),\n    blue = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized - phaseThird));\n  return {\n    r: Math.round(red),\n    g: Math.round(green),\n    b: Math.round(blue)\n  };\n}\nexport function hslaToRgba(hsla) {\n  const rgbResult = hslToRgb(hsla);\n  return {\n    a: hsla.a,\n    b: rgbResult.b,\n    g: rgbResult.g,\n    r: rgbResult.r\n  };\n}\nexport function getRandomRgbColor(min) {\n  const defaultMin = 0,\n    fixedMin = min !== null && min !== void 0 ? min : defaultMin,\n    rgbMax = 256;\n  return {\n    b: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax))),\n    g: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax))),\n    r: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax)))\n  };\n}\nexport function getStyleFromRgb(color, opacity) {\n  const defaultOpacity = 1;\n  return \"rgba(\".concat(color.r, \", \").concat(color.g, \", \").concat(color.b, \", \").concat(opacity !== null && opacity !== void 0 ? opacity : defaultOpacity, \")\");\n}\nexport function getStyleFromHsl(color, opacity) {\n  const defaultOpacity = 1;\n  return \"hsla(\".concat(color.h, \", \").concat(color.s, \"%, \").concat(color.l, \"%, \").concat(opacity !== null && opacity !== void 0 ? opacity : defaultOpacity, \")\");\n}\nexport function colorMix(color1, color2, size1, size2) {\n  let rgb1 = color1,\n    rgb2 = color2;\n  if (rgb1.r === undefined) {\n    rgb1 = hslToRgb(color1);\n  }\n  if (rgb2.r === undefined) {\n    rgb2 = hslToRgb(color2);\n  }\n  return {\n    b: mix(rgb1.b, rgb2.b, size1, size2),\n    g: mix(rgb1.g, rgb2.g, size1, size2),\n    r: mix(rgb1.r, rgb2.r, size1, size2)\n  };\n}\nexport function getLinkColor(p1, p2, linkColor) {\n  if (linkColor === randomColorValue) {\n    return getRandomRgbColor();\n  } else if (linkColor === midColorValue) {\n    var _p1$getFillColor, _p2$getFillColor;\n    const sourceColor = (_p1$getFillColor = p1.getFillColor()) !== null && _p1$getFillColor !== void 0 ? _p1$getFillColor : p1.getStrokeColor(),\n      destColor = (_p2$getFillColor = p2 === null || p2 === void 0 ? void 0 : p2.getFillColor()) !== null && _p2$getFillColor !== void 0 ? _p2$getFillColor : p2 === null || p2 === void 0 ? void 0 : p2.getStrokeColor();\n    if (sourceColor && destColor && p2) {\n      return colorMix(sourceColor, destColor, p1.getRadius(), p2.getRadius());\n    } else {\n      const hslColor = sourceColor !== null && sourceColor !== void 0 ? sourceColor : destColor;\n      if (hslColor) {\n        return hslToRgb(hslColor);\n      }\n    }\n  } else {\n    return linkColor;\n  }\n}\nexport function getLinkRandomColor(engine, optColor, blink, consent) {\n  const color = isString(optColor) ? optColor : optColor.value;\n  if (color === randomColorValue) {\n    if (consent) {\n      return rangeColorToRgb(engine, {\n        value: color\n      });\n    }\n    if (blink) {\n      return randomColorValue;\n    }\n    return midColorValue;\n  } else if (color === midColorValue) {\n    return midColorValue;\n  } else {\n    return rangeColorToRgb(engine, {\n      value: color\n    });\n  }\n}\nexport function getHslFromAnimation(animation) {\n  return animation !== undefined ? {\n    h: animation.h.value,\n    s: animation.s.value,\n    l: animation.l.value\n  } : undefined;\n}\nexport function getHslAnimationFromHsl(hsl, animationOptions, reduceFactor) {\n  const resColor = {\n    h: {\n      enable: false,\n      value: hsl.h\n    },\n    s: {\n      enable: false,\n      value: hsl.s\n    },\n    l: {\n      enable: false,\n      value: hsl.l\n    }\n  };\n  if (animationOptions) {\n    setColorAnimation(resColor.h, animationOptions.h, reduceFactor);\n    setColorAnimation(resColor.s, animationOptions.s, reduceFactor);\n    setColorAnimation(resColor.l, animationOptions.l, reduceFactor);\n  }\n  return resColor;\n}\nfunction setColorAnimation(colorValue, colorAnimation, reduceFactor) {\n  colorValue.enable = colorAnimation.enable;\n  const defaultVelocity = 0,\n    decayOffset = 1,\n    defaultLoops = 0,\n    defaultTime = 0;\n  if (colorValue.enable) {\n    colorValue.velocity = getRangeValue(colorAnimation.speed) / percentDenominator * reduceFactor;\n    colorValue.decay = decayOffset - getRangeValue(colorAnimation.decay);\n    colorValue.status = AnimationStatus.increasing;\n    colorValue.loops = defaultLoops;\n    colorValue.maxLoops = getRangeValue(colorAnimation.count);\n    colorValue.time = defaultTime;\n    colorValue.delayTime = getRangeValue(colorAnimation.delay) * millisecondsToSeconds;\n    if (!colorAnimation.sync) {\n      colorValue.velocity *= getRandom();\n      colorValue.value *= getRandom();\n    }\n    colorValue.initialValue = colorValue.value;\n    colorValue.offset = setRangeValue(colorAnimation.offset);\n  } else {\n    colorValue.velocity = defaultVelocity;\n  }\n}\nexport function updateColorValue(data, range, decrease, delta) {\n  var _data$maxLoops, _data$loops, _data$maxLoops2, _data$delayTime, _data$delayTime2, _data$delayTime3, _data$delayTime4, _data$velocity, _data$decay;\n  const minLoops = 0,\n    minDelay = 0,\n    identity = 1,\n    minVelocity = 0,\n    minOffset = 0,\n    velocityFactor = 3.6;\n  if (!data || !data.enable || ((_data$maxLoops = data.maxLoops) !== null && _data$maxLoops !== void 0 ? _data$maxLoops : minLoops) > minLoops && ((_data$loops = data.loops) !== null && _data$loops !== void 0 ? _data$loops : minLoops) > ((_data$maxLoops2 = data.maxLoops) !== null && _data$maxLoops2 !== void 0 ? _data$maxLoops2 : minLoops)) {\n    return;\n  }\n  if (!data.time) {\n    data.time = 0;\n  }\n  if (((_data$delayTime = data.delayTime) !== null && _data$delayTime !== void 0 ? _data$delayTime : minDelay) > minDelay && data.time < ((_data$delayTime2 = data.delayTime) !== null && _data$delayTime2 !== void 0 ? _data$delayTime2 : minDelay)) {\n    data.time += delta.value;\n  }\n  if (((_data$delayTime3 = data.delayTime) !== null && _data$delayTime3 !== void 0 ? _data$delayTime3 : minDelay) > minDelay && data.time < ((_data$delayTime4 = data.delayTime) !== null && _data$delayTime4 !== void 0 ? _data$delayTime4 : minDelay)) {\n    return;\n  }\n  const offset = data.offset ? randomInRange(data.offset) : minOffset,\n    velocity = ((_data$velocity = data.velocity) !== null && _data$velocity !== void 0 ? _data$velocity : minVelocity) * delta.factor + offset * velocityFactor,\n    decay = (_data$decay = data.decay) !== null && _data$decay !== void 0 ? _data$decay : identity,\n    max = getRangeMax(range),\n    min = getRangeMin(range);\n  if (!decrease || data.status === AnimationStatus.increasing) {\n    data.value += velocity;\n    if (data.value > max) {\n      if (!data.loops) {\n        data.loops = 0;\n      }\n      data.loops++;\n      if (decrease) {\n        data.status = AnimationStatus.decreasing;\n      } else {\n        data.value -= max;\n      }\n    }\n  } else {\n    data.value -= velocity;\n    const minValue = 0;\n    if (data.value < minValue) {\n      if (!data.loops) {\n        data.loops = 0;\n      }\n      data.loops++;\n      data.status = AnimationStatus.increasing;\n    }\n  }\n  if (data.velocity && decay !== identity) {\n    data.velocity *= decay;\n  }\n  data.value = clamp(data.value, min, max);\n}\nexport function updateColor(color, delta) {\n  if (!color) {\n    return;\n  }\n  const {\n    h,\n    s,\n    l\n  } = color;\n  const ranges = {\n    h: {\n      min: 0,\n      max: 360\n    },\n    s: {\n      min: 0,\n      max: 100\n    },\n    l: {\n      min: 0,\n      max: 100\n    }\n  };\n  if (h) {\n    updateColorValue(h, ranges.h, false, delta);\n  }\n  if (s) {\n    updateColorValue(s, ranges.s, true, delta);\n  }\n  if (l) {\n    updateColorValue(l, ranges.l, true, delta);\n  }\n}","map":{"version":3,"names":["clamp","getRandom","getRangeMax","getRangeMin","getRangeValue","mix","randomInRange","setRangeValue","isArray","isString","millisecondsToSeconds","percentDenominator","AnimationStatus","itemFromArray","randomColorValue","midColorValue","stringToRgba","engine","input","manager","colorManagers","values","startsWith","stringPrefix","parseString","rangeColorToRgb","index","useIndex","arguments","length","undefined","color","value","colorToRgb","res","handleRangeColor","getRandomRgbColor","stringToRgb","handleColor","colorToHsl","rgb","rgbToHsl","rangeColorToHsl","rgbMax","hMax","sMax","lMax","hMin","sMin","hPhase","half","double","r1","r","g1","g","b1","b","max","Math","min","h","l","s","stringToAlpha","_stringToRgba","a","hslToRgb","hsl","lMin","hNormalized","sNormalized","lNormalized","rgbFactor","triple","grayscaleValue","round","channel","temp1","temp2","temp3","temp3Min","temp3Max","sextuple","temp3Offset","sNormalizedOffset","phaseNumerator","phaseThird","red","green","blue","hslaToRgba","hsla","rgbResult","defaultMin","fixedMin","floor","getStyleFromRgb","opacity","defaultOpacity","concat","getStyleFromHsl","colorMix","color1","color2","size1","size2","rgb1","rgb2","getLinkColor","p1","p2","linkColor","_p1$getFillColor","_p2$getFillColor","sourceColor","getFillColor","getStrokeColor","destColor","getRadius","hslColor","getLinkRandomColor","optColor","blink","consent","getHslFromAnimation","animation","getHslAnimationFromHsl","animationOptions","reduceFactor","resColor","enable","setColorAnimation","colorValue","colorAnimation","defaultVelocity","decayOffset","defaultLoops","defaultTime","velocity","speed","decay","status","increasing","loops","maxLoops","count","time","delayTime","delay","sync","initialValue","offset","updateColorValue","data","range","decrease","delta","_data$maxLoops","_data$loops","_data$maxLoops2","_data$delayTime","_data$delayTime2","_data$delayTime3","_data$delayTime4","_data$velocity","_data$decay","minLoops","minDelay","identity","minVelocity","minOffset","velocityFactor","factor","decreasing","minValue","updateColor","ranges"],"sources":["/Users/abolfaz/Downloads/AFblog/node_modules/@tsparticles/engine/browser/Utils/ColorUtils.js"],"sourcesContent":["import { clamp, getRandom, getRangeMax, getRangeMin, getRangeValue, mix, randomInRange, setRangeValue, } from \"./NumberUtils.js\";\nimport { isArray, isString } from \"./TypeUtils.js\";\nimport { millisecondsToSeconds, percentDenominator } from \"../Core/Utils/Constants.js\";\nimport { AnimationStatus } from \"../Enums/AnimationStatus.js\";\nimport { itemFromArray } from \"./Utils.js\";\nconst randomColorValue = \"random\", midColorValue = \"mid\";\nfunction stringToRgba(engine, input) {\n    if (!input) {\n        return;\n    }\n    for (const manager of engine.colorManagers.values()) {\n        if (input.startsWith(manager.stringPrefix)) {\n            return manager.parseString(input);\n        }\n    }\n}\nexport function rangeColorToRgb(engine, input, index, useIndex = true) {\n    if (!input) {\n        return;\n    }\n    const color = isString(input) ? { value: input } : input;\n    if (isString(color.value)) {\n        return colorToRgb(engine, color.value, index, useIndex);\n    }\n    if (isArray(color.value)) {\n        return rangeColorToRgb(engine, {\n            value: itemFromArray(color.value, index, useIndex),\n        });\n    }\n    for (const manager of engine.colorManagers.values()) {\n        const res = manager.handleRangeColor(color);\n        if (res) {\n            return res;\n        }\n    }\n}\nexport function colorToRgb(engine, input, index, useIndex = true) {\n    if (!input) {\n        return;\n    }\n    const color = isString(input) ? { value: input } : input;\n    if (isString(color.value)) {\n        return color.value === randomColorValue ? getRandomRgbColor() : stringToRgb(engine, color.value);\n    }\n    if (isArray(color.value)) {\n        return colorToRgb(engine, {\n            value: itemFromArray(color.value, index, useIndex),\n        });\n    }\n    for (const manager of engine.colorManagers.values()) {\n        const res = manager.handleColor(color);\n        if (res) {\n            return res;\n        }\n    }\n}\nexport function colorToHsl(engine, color, index, useIndex = true) {\n    const rgb = colorToRgb(engine, color, index, useIndex);\n    return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rangeColorToHsl(engine, color, index, useIndex = true) {\n    const rgb = rangeColorToRgb(engine, color, index, useIndex);\n    return rgb ? rgbToHsl(rgb) : undefined;\n}\nexport function rgbToHsl(color) {\n    const rgbMax = 255, hMax = 360, sMax = 100, lMax = 100, hMin = 0, sMin = 0, hPhase = 60, half = 0.5, double = 2, r1 = color.r / rgbMax, g1 = color.g / rgbMax, b1 = color.b / rgbMax, max = Math.max(r1, g1, b1), min = Math.min(r1, g1, b1), res = {\n        h: hMin,\n        l: (max + min) * half,\n        s: sMin,\n    };\n    if (max !== min) {\n        res.s = res.l < half ? (max - min) / (max + min) : (max - min) / (double - max - min);\n        res.h =\n            r1 === max\n                ? (g1 - b1) / (max - min)\n                : (res.h = g1 === max ? double + (b1 - r1) / (max - min) : double * double + (r1 - g1) / (max - min));\n    }\n    res.l *= lMax;\n    res.s *= sMax;\n    res.h *= hPhase;\n    if (res.h < hMin) {\n        res.h += hMax;\n    }\n    if (res.h >= hMax) {\n        res.h -= hMax;\n    }\n    return res;\n}\nexport function stringToAlpha(engine, input) {\n    return stringToRgba(engine, input)?.a;\n}\nexport function stringToRgb(engine, input) {\n    return stringToRgba(engine, input);\n}\nexport function hslToRgb(hsl) {\n    const hMax = 360, sMax = 100, lMax = 100, sMin = 0, lMin = 0, h = ((hsl.h % hMax) + hMax) % hMax, s = Math.max(sMin, Math.min(sMax, hsl.s)), l = Math.max(lMin, Math.min(lMax, hsl.l)), hNormalized = h / hMax, sNormalized = s / sMax, lNormalized = l / lMax, rgbFactor = 255, triple = 3;\n    if (s === sMin) {\n        const grayscaleValue = Math.round(lNormalized * rgbFactor);\n        return { r: grayscaleValue, g: grayscaleValue, b: grayscaleValue };\n    }\n    const half = 0.5, double = 2, channel = (temp1, temp2, temp3) => {\n        const temp3Min = 0, temp3Max = 1, sextuple = 6;\n        if (temp3 < temp3Min) {\n            temp3++;\n        }\n        if (temp3 > temp3Max) {\n            temp3--;\n        }\n        if (temp3 * sextuple < temp3Max) {\n            return temp1 + (temp2 - temp1) * sextuple * temp3;\n        }\n        if (temp3 * double < temp3Max) {\n            return temp2;\n        }\n        if (temp3 * triple < temp3Max * double) {\n            const temp3Offset = double / triple;\n            return temp1 + (temp2 - temp1) * (temp3Offset - temp3) * sextuple;\n        }\n        return temp1;\n    }, sNormalizedOffset = 1, temp1 = lNormalized < half\n        ? lNormalized * (sNormalizedOffset + sNormalized)\n        : lNormalized + sNormalized - lNormalized * sNormalized, temp2 = double * lNormalized - temp1, phaseNumerator = 1, phaseThird = phaseNumerator / triple, red = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized + phaseThird)), green = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized)), blue = Math.min(rgbFactor, rgbFactor * channel(temp2, temp1, hNormalized - phaseThird));\n    return { r: Math.round(red), g: Math.round(green), b: Math.round(blue) };\n}\nexport function hslaToRgba(hsla) {\n    const rgbResult = hslToRgb(hsla);\n    return {\n        a: hsla.a,\n        b: rgbResult.b,\n        g: rgbResult.g,\n        r: rgbResult.r,\n    };\n}\nexport function getRandomRgbColor(min) {\n    const defaultMin = 0, fixedMin = min ?? defaultMin, rgbMax = 256;\n    return {\n        b: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax))),\n        g: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax))),\n        r: Math.floor(randomInRange(setRangeValue(fixedMin, rgbMax))),\n    };\n}\nexport function getStyleFromRgb(color, opacity) {\n    const defaultOpacity = 1;\n    return `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity ?? defaultOpacity})`;\n}\nexport function getStyleFromHsl(color, opacity) {\n    const defaultOpacity = 1;\n    return `hsla(${color.h}, ${color.s}%, ${color.l}%, ${opacity ?? defaultOpacity})`;\n}\nexport function colorMix(color1, color2, size1, size2) {\n    let rgb1 = color1, rgb2 = color2;\n    if (rgb1.r === undefined) {\n        rgb1 = hslToRgb(color1);\n    }\n    if (rgb2.r === undefined) {\n        rgb2 = hslToRgb(color2);\n    }\n    return {\n        b: mix(rgb1.b, rgb2.b, size1, size2),\n        g: mix(rgb1.g, rgb2.g, size1, size2),\n        r: mix(rgb1.r, rgb2.r, size1, size2),\n    };\n}\nexport function getLinkColor(p1, p2, linkColor) {\n    if (linkColor === randomColorValue) {\n        return getRandomRgbColor();\n    }\n    else if (linkColor === midColorValue) {\n        const sourceColor = p1.getFillColor() ?? p1.getStrokeColor(), destColor = p2?.getFillColor() ?? p2?.getStrokeColor();\n        if (sourceColor && destColor && p2) {\n            return colorMix(sourceColor, destColor, p1.getRadius(), p2.getRadius());\n        }\n        else {\n            const hslColor = sourceColor ?? destColor;\n            if (hslColor) {\n                return hslToRgb(hslColor);\n            }\n        }\n    }\n    else {\n        return linkColor;\n    }\n}\nexport function getLinkRandomColor(engine, optColor, blink, consent) {\n    const color = isString(optColor) ? optColor : optColor.value;\n    if (color === randomColorValue) {\n        if (consent) {\n            return rangeColorToRgb(engine, {\n                value: color,\n            });\n        }\n        if (blink) {\n            return randomColorValue;\n        }\n        return midColorValue;\n    }\n    else if (color === midColorValue) {\n        return midColorValue;\n    }\n    else {\n        return rangeColorToRgb(engine, {\n            value: color,\n        });\n    }\n}\nexport function getHslFromAnimation(animation) {\n    return animation !== undefined\n        ? {\n            h: animation.h.value,\n            s: animation.s.value,\n            l: animation.l.value,\n        }\n        : undefined;\n}\nexport function getHslAnimationFromHsl(hsl, animationOptions, reduceFactor) {\n    const resColor = {\n        h: {\n            enable: false,\n            value: hsl.h,\n        },\n        s: {\n            enable: false,\n            value: hsl.s,\n        },\n        l: {\n            enable: false,\n            value: hsl.l,\n        },\n    };\n    if (animationOptions) {\n        setColorAnimation(resColor.h, animationOptions.h, reduceFactor);\n        setColorAnimation(resColor.s, animationOptions.s, reduceFactor);\n        setColorAnimation(resColor.l, animationOptions.l, reduceFactor);\n    }\n    return resColor;\n}\nfunction setColorAnimation(colorValue, colorAnimation, reduceFactor) {\n    colorValue.enable = colorAnimation.enable;\n    const defaultVelocity = 0, decayOffset = 1, defaultLoops = 0, defaultTime = 0;\n    if (colorValue.enable) {\n        colorValue.velocity = (getRangeValue(colorAnimation.speed) / percentDenominator) * reduceFactor;\n        colorValue.decay = decayOffset - getRangeValue(colorAnimation.decay);\n        colorValue.status = AnimationStatus.increasing;\n        colorValue.loops = defaultLoops;\n        colorValue.maxLoops = getRangeValue(colorAnimation.count);\n        colorValue.time = defaultTime;\n        colorValue.delayTime = getRangeValue(colorAnimation.delay) * millisecondsToSeconds;\n        if (!colorAnimation.sync) {\n            colorValue.velocity *= getRandom();\n            colorValue.value *= getRandom();\n        }\n        colorValue.initialValue = colorValue.value;\n        colorValue.offset = setRangeValue(colorAnimation.offset);\n    }\n    else {\n        colorValue.velocity = defaultVelocity;\n    }\n}\nexport function updateColorValue(data, range, decrease, delta) {\n    const minLoops = 0, minDelay = 0, identity = 1, minVelocity = 0, minOffset = 0, velocityFactor = 3.6;\n    if (!data ||\n        !data.enable ||\n        ((data.maxLoops ?? minLoops) > minLoops && (data.loops ?? minLoops) > (data.maxLoops ?? minLoops))) {\n        return;\n    }\n    if (!data.time) {\n        data.time = 0;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        data.time += delta.value;\n    }\n    if ((data.delayTime ?? minDelay) > minDelay && data.time < (data.delayTime ?? minDelay)) {\n        return;\n    }\n    const offset = data.offset ? randomInRange(data.offset) : minOffset, velocity = (data.velocity ?? minVelocity) * delta.factor + offset * velocityFactor, decay = data.decay ?? identity, max = getRangeMax(range), min = getRangeMin(range);\n    if (!decrease || data.status === AnimationStatus.increasing) {\n        data.value += velocity;\n        if (data.value > max) {\n            if (!data.loops) {\n                data.loops = 0;\n            }\n            data.loops++;\n            if (decrease) {\n                data.status = AnimationStatus.decreasing;\n            }\n            else {\n                data.value -= max;\n            }\n        }\n    }\n    else {\n        data.value -= velocity;\n        const minValue = 0;\n        if (data.value < minValue) {\n            if (!data.loops) {\n                data.loops = 0;\n            }\n            data.loops++;\n            data.status = AnimationStatus.increasing;\n        }\n    }\n    if (data.velocity && decay !== identity) {\n        data.velocity *= decay;\n    }\n    data.value = clamp(data.value, min, max);\n}\nexport function updateColor(color, delta) {\n    if (!color) {\n        return;\n    }\n    const { h, s, l } = color;\n    const ranges = {\n        h: { min: 0, max: 360 },\n        s: { min: 0, max: 100 },\n        l: { min: 0, max: 100 },\n    };\n    if (h) {\n        updateColorValue(h, ranges.h, false, delta);\n    }\n    if (s) {\n        updateColorValue(s, ranges.s, true, delta);\n    }\n    if (l) {\n        updateColorValue(l, ranges.l, true, delta);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}