{"ast":null,"code":"import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent } from \"@tsparticles/engine\";\nimport { Grab } from \"./Options/Classes/Grab.js\";\nimport { drawGrab } from \"./Utils.js\";\nconst grabMode = \"grab\",\n  minDistance = 0,\n  minOpacity = 0;\nexport class Grabber extends ExternalInteractorBase {\n  constructor(container, engine) {\n    super(container);\n    this._engine = engine;\n  }\n  clear() {}\n  init() {\n    const container = this.container,\n      grab = container.actualOptions.interactivity.modes.grab;\n    if (!grab) {\n      return;\n    }\n    container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n  }\n  interact() {\n    const container = this.container,\n      options = container.actualOptions,\n      interactivity = options.interactivity;\n    if (!interactivity.modes.grab || !interactivity.events.onHover.enable || container.interactivity.status !== mouseMoveEvent) {\n      return;\n    }\n    const mousePos = container.interactivity.mouse.position;\n    if (!mousePos) {\n      return;\n    }\n    const distance = container.retina.grabModeDistance;\n    if (!distance || distance < minDistance) {\n      return;\n    }\n    const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n    for (const particle of query) {\n      var _grabLineOptions$colo, _particle$options$lin;\n      const pos = particle.getPosition(),\n        pointDistance = getDistance(pos, mousePos);\n      if (pointDistance > distance) {\n        continue;\n      }\n      const grabLineOptions = interactivity.modes.grab.links,\n        lineOpacity = grabLineOptions.opacity,\n        opacityLine = lineOpacity - pointDistance * lineOpacity / distance;\n      if (opacityLine <= minOpacity) {\n        continue;\n      }\n      const optColor = (_grabLineOptions$colo = grabLineOptions.color) !== null && _grabLineOptions$colo !== void 0 ? _grabLineOptions$colo : (_particle$options$lin = particle.options.links) === null || _particle$options$lin === void 0 ? void 0 : _particle$options$lin.color;\n      if (!container.particles.grabLineColor && optColor) {\n        const linksOptions = interactivity.modes.grab.links;\n        container.particles.grabLineColor = getLinkRandomColor(this._engine, optColor, linksOptions.blink, linksOptions.consent);\n      }\n      const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n      if (!colorLine) {\n        continue;\n      }\n      drawGrab(container, particle, colorLine, opacityLine, mousePos);\n    }\n  }\n  isEnabled(particle) {\n    var _particle$interactivi;\n    const container = this.container,\n      mouse = container.interactivity.mouse,\n      events = ((_particle$interactivi = particle === null || particle === void 0 ? void 0 : particle.interactivity) !== null && _particle$interactivi !== void 0 ? _particle$interactivi : container.actualOptions.interactivity).events;\n    return events.onHover.enable && !!mouse.position && isInArray(grabMode, events.onHover.mode);\n  }\n  loadModeOptions(options) {\n    if (!options.grab) {\n      options.grab = new Grab();\n    }\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n    for (const source of sources) {\n      options.grab.load(source === null || source === void 0 ? void 0 : source.grab);\n    }\n  }\n  reset() {}\n}","map":{"version":3,"names":["ExternalInteractorBase","getDistance","getLinkColor","getLinkRandomColor","isInArray","mouseMoveEvent","Grab","drawGrab","grabMode","minDistance","minOpacity","Grabber","constructor","container","engine","_engine","clear","init","grab","actualOptions","interactivity","modes","retina","grabModeDistance","distance","pixelRatio","interact","options","events","onHover","enable","status","mousePos","mouse","position","query","particles","quadTree","queryCircle","p","isEnabled","particle","_grabLineOptions$colo","_particle$options$lin","pos","getPosition","pointDistance","grabLineOptions","links","lineOpacity","opacity","opacityLine","optColor","color","grabLineColor","linksOptions","blink","consent","colorLine","undefined","_particle$interactivi","mode","loadModeOptions","_len","arguments","length","sources","Array","_key","source","load","reset"],"sources":["/Users/abolfaz/Programming/ آموزش ها/projects/AFblog/node_modules/@tsparticles/interaction-external-grab/browser/Grabber.js"],"sourcesContent":["import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { Grab } from \"./Options/Classes/Grab.js\";\nimport { drawGrab } from \"./Utils.js\";\nconst grabMode = \"grab\", minDistance = 0, minOpacity = 0;\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container, engine) {\n        super(container);\n        this._engine = engine;\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < minDistance) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= minOpacity) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(this._engine, optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(grabMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}